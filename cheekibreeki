<?php
// STALKER MACHINE TRANSLATOR
// php-cli
//
// Usage:
// php cheekibreeki folder:tmp from:ru to:en
// Optional "comments:yes" or "comments:no"
// Optional "folderResult:namefolder"
// Optional "proxy:localhost port:8888"
// Optional "encoding:ISO-8859-1"
// 
// https://github.com/statickidz/php-google-translate-free
// https://cloud.google.com/translate/docs/languages
//
set_time_limit(36000);

if (count($argv)>1) {
	$encoding = null;
	$withComments = false;
	$folderResult = "result-translation";
	foreach ($argv as $arg) {
		if (isMyStringIn(":", $arg)) {
			$aux = explode(":", $arg);
			switch ($aux[0]) {
				case "from":
					if ($aux[1]) {
						define("fromLang", $aux[1]);
					}
					break;
				case "to":
					if ($aux[1]) {
						define("toLang", $aux[1]);
					}
					break;
				case "folder":
					if ($aux[1]) {
						define("folder", $aux[1]);
					}
					break;
				case "proxy":
					if ($aux[1]) {
						define("proxy", $aux[1]);
					}
					break;
				case "port":
					if ($aux[1]) {
						define("port", $aux[1]);
					}
					break;
				case "comments":
					if ($aux[1]=="yes") {
						$withComments = true;
					} elseif ($aux[1]=="no") {
						$withComments = false;
					}
					break;
				case "folderResult":
					if ($aux[1]) {
						$folderResult = $aux[1];
					}
					break;
				case "encoding":
					if ($aux[1]) {
						$encoding = $aux[1];
					}
					break;
			}
		}
	}
	if (!$encoding) $encoding = "ISO-8859-1";
	header("Content-type: text/html;charset=".$encoding);
	define("withComments", $withComments);
	define("folderResult", $folderResult);

	msg("");
	msg("STALKER MACHINE TRANSLATOR");
	msg("");

	if (defined("folder") and defined("folderResult") and defined("fromLang") and defined("toLang")) {
		if (is_dir(folder)) {
			@mkdir(folderResult);
			readFolder(folder);
			msg("");
			msg("|||||||||||||| FINISHED!");
			msg("");
			msg("Files are in folder: ".folderResult);
			msg("");
		} else {
			msg("Can't find the folder: ".folder.". Finishing...");
		}
	} else {
		msg("Need more arguments to do anything...");
	}
} else {
	msg("No arguments, can't do anything...");
}
msg("");
die;

function readFolder($folder)
{
	if ($handle = opendir($folder)) {
	    while (false !== ($entry = readdir($handle))) {
	    	$res = null;
	        if ($entry != "." && $entry != "..") {
	            if (is_dir($folder."/".$entry)) {
	            	return readFolder($folder."/".$entry);
	            } else {
	            	$file_parts = pathinfo($entry);
	            	if ($file_parts['extension']=="xml") {
	            		$contents = file_get_contents($folder."/".$entry);
	            		if (fromLang=="ru") {
	            			$contents = mb_convert_encoding($contents, $encoding, 'CP1251');
	            		} else {
	            			$contents = mb_convert_encoding($contents, $encoding);
	            		}
	            		if ($res = translateFile($contents, $entry)) {
	            			file_put_contents(folderResult."/".$entry, $res);
	            		}
	            	}
	            }
	        }
	    }
	    closedir($handle);
	}
}

function translateFile($contents, $name)
{
	$detectTags = array("text", "bio");

	$document = $contents;
	$document = explode("\n", $document);
	if (is_array($document)) {
		echo "\n\r|||||||||||||| cheeki breeking: ".strtoupper($name)."\n\r\n\r";

		$candidateText = null;

		foreach ($document as $key=>&$line) {
			$lineTmp = null;
			$multiLineWay = false;

			foreach ($detectTags as $detectTag) {
				if (isMyStringIn('<'.$detectTag.'>', $line) and 
					isMyStringIn('</'.$detectTag.'>', $line)) {
					$candidateText = get_string_between($line, '<'.$detectTag.'>', '</'.$detectTag.'>');
					$multiLineWay = false;
				} else if (isMyStringIn('<'.$detectTag.'>', $line) and 
					!isMyStringIn('</'.$detectTag.'>', $line)) {

					$candidateText .= $line;
					$newIndex = $key+1;

					while ( !isMyStringIn('</'.$detectTag.'>', $document[$newIndex]) ) {
						$candidateText .= $document[$newIndex];
						unset($document[$newIndex]);
						$newIndex++;
					}
					if ( isMyStringIn('</'.$detectTag.'>', $document[$newIndex]) ) {
						$candidateText .= $document[$newIndex];
						unset($document[$newIndex]);
					}
					$candidateText = get_string_between($candidateText, '<'.$detectTag.'>', '</'.$detectTag.'>');

					if (substr($candidateText, -1)!=".") {
						$candidateText .= ".";
					}

					$multiLineWay = true;
					//$document = array_values($document);
				}
				
				if ($candidateText)
				{
					$transTexts = limiteChars(prefixes($candidateText));
					if (is_array($transTexts)) {
						foreach ($transTexts as $transText) {
							$aux = null;
							if ($aux = traduce($transText, fromLang, toLang)) {
								$aux = ltrim(fixes($aux));
								$lineTmp .= $aux;
								if (count($transTexts)>1) {
									$lineTmp .= ". ";
								}
							}
						}

						if ($multiLineWay==false) {
							$lineTmp = str_replace($candidateText, trim($lineTmp), $line);
						} else {
							$lineTmp = '		<'.$detectTag.'>'.$lineTmp.'</'.$detectTag.'>';				
						}						
					}
				} else {
					if ($multiLineWay==false) {
						
					}
				}
				$candidateText = null;

			}

			if ($lineTmp) {
				if (withComments==true) {
					$lineCommented = str_replace('<'.$detectTag.'>', '<!--<'.$detectTag.'>', $line);
					$lineCommented = str_replace('</'.$detectTag.'>', '</'.$detectTag.'>-->', $lineCommented);
					$new[] = $lineCommented;
				}
				$new[] = $lineTmp;
			} else {				
				$new[] = $line;
			}
			echo $new[count($new)-1]."\r\n";
		}
		$final = implode($new, "\n");
		return $final;
	}
}

function text_to_sentences($long_string, $max_length = 400, $max_sentences = 200, $encoding = 'UTF-8')
{
    // If total string length less than given max length of sentence -
    // returns array of this string.
    $string_length = mb_strlen($long_string, $encoding);
    if ($string_length <= $max_length) {
        return [$long_string];
    }

    // If string contains only one word -
    // returns array of this word.
    $words_array = explode(' ', $long_string);
    if (count($words_array) < 2) {
        return $words_array;
    }

    // If length of the first word of string is greater than given max length of sentence -
    // cuts length of word down to max length and returns array of this word.
    $first_word = $words_array[0];
    if (mb_strlen($first_word, $encoding) > $max_length) {
        return [mb_substr($first_word, 0, $max_length, $encoding)];
    }

    $sentences_array = [];
    $ended_word = 0;

    // Gathers sentences
    for ($sentence = 0; $sentence < $max_sentences; $sentence++) {
        $short_string = '';

        foreach ($words_array as $word_number => $current_word) {
            $expected_length = mb_strlen($short_string . ' ' . $current_word, $encoding);
            if ($expected_length > $max_length) {
                break;
            }
            
            $short_string .= $current_word . ' ';
            $ended_word = $word_number + 1;
        }

        $sentences_array[] = $short_string;
        $words_array = array_slice($words_array, $ended_word);

        if (!$words_array) {
            break;
        }
    }

    // Returns array of sentences
    return $sentences_array;
}

function limiteChars($text)
{
	if ($text) {
		if (strlen($text)>=1750) {
			$texts = text_to_sentences($text);
		} else {
			$texts[0] = $text;
		}
		return $texts;
	}
	return false;
}

function limiteCharsOld($text)
{
	if ($text) {
		$_text = urlencode($text);
		if (strlen($_text)>=4800) {
			$addCom = false;
			if (mb_substr($text, -1)=="»") {
				$addCom = true;
			}

			do {
				$aux = substr($_text, 0, strpos(wordwrap($_text, 4800), "."));
				if ($aux) {
					$_text = trim(str_replace($aux.".", "", $_text));
					$texts[] = trim(ltrim(urldecode($aux)));
					//echo strlen($_text)."-----".$text; echo "\n\r\n\r\n\r";
				} else {
					print_r("<pre>"); print_r("BUCLE! STOP!"); print_r("</pre>"); die;
				}
			} while (strlen($_text)>0 and $_text!="%C2%BB");

			if (is_array($texts) and $addCom==true) {
				$texts[count($texts)-1] .= "»";
			}

		} else {
			$texts[0] = $text;
		}
		return $texts;
	}
	return false;
}

function traduce($text, $source, $target)
{
	$trans = new GoogleTranslate();
	$result = $trans->translate($source, $target, $text);
	return $result;
}

function isMyStringIn($myString, $phrase)
{
    if (strpos($phrase, $myString) !== false) {
        return true;
    }
    return false;
}

function get_string_between($string, $start, $end)
{
    $string = ' ' . $string;
    $ini = strpos($string, $start);
    if ($ini == 0) return '';
    $ini += strlen($start);
    $len = strpos($string, $end, $ini) - $ini;
    return substr($string, $ini, $len);
}

function prefixes($text)
{
	if ($text) {
		$text = str_replace('\n', '\n ', $text);
		$text = str_replace('	',' ', $text);
	}
	return $text;
}

function fixes($text)
{
	if ($text) {
		$text = str_replace('\ n ', '\n', $text);
		$text = str_replace('\ n', '\n', $text);
		$text = str_replace('\n ', '\n', $text);
		$text = str_replace(' \n ', '\n', $text);
		$text = str_replace(' \ N', '\n', $text);
		$text = str_replace('\ N', '\n', $text);
		$text = str_replace('% c ', '%c', $text);
		$text = str_replace('% c', '%c', $text);
		$text = str_replace('% s ', '%s', $text);
		$text = str_replace('% s', '%s', $text);
		$text = str_replace('%c', ' %c ', $text);
		$text = str_replace('%s', ' %s ', $text);
		$text = str_replace('%c [', '%c[', $text);		
		$text = str_replace(' ?', '?', $text);
		$text = str_replace(' ', ' ', $text);
		$text = str_replace('] ', ']', $text);
		$text = str_replace(' ]', ']', $text);
		$text = str_replace('[ ', '[', $text);
		$text = str_replace('c[ ', 'c[', $text);
		$text = str_replace(' . ', '. ', $text);		
		$text = str_replace('acosador', 'stalker', $text);
		$text = str_replace('Acosador', 'Stalker', $text);
		$text = str_replace('…', '...', $text);
		$text = str_replace('chatear', 'charlar', $text);
		$text = str_replace('Cielo Limpio', 'Clear Sky', $text);
		//$text = str_replace('Brain Scorcher', 'Cauterizador Cerebral', $text);
		$text = str_replace('Scorcher del cerebro', 'Cauterizador Cerebral', $text);
		$text = str_replace('\n\n', '\n \n', $text);
		$text = str_replace(' ...', '...', $text);
		$text = str_replace(' : ', ':', $text);
		$text = str_replace('.  ', '. ', $text);
		$text = str_replace('Healthy, stalker', 'Howdy, stalker', $text);
		$text = str_replace('вЂў ', '• ', $text);
		$text = str_replace('вЂњ', '"', $text);
		$text = str_replace('вЂќ', '"', $text);
		$text = str_replace('вЂ™', "'", $text);
		$text = str_replace('вЂў. ', '• ', $text);
		$text = str_replace('вЂ”', '-', $text);
		$text = str_replace('вЂ‹вЂ‹', '', $text);
		$text = str_replace('вЂў%%. ', '• ', $text);
		$text = str_replace('вЂњ', '"', $text);
		$text = str_replace('вЂќ', '"', $text);
		$text = str_replace('Hypericum', 'Trapper', $text);
		$text = str_replace('Wishmaster', 'Wish Granter', $text);
		$text = str_replace('CHARACTERISTICS:', 'PROPERTIES:', $text);
		$text = str_replace('personal thing', 'personal belongings', $text);
		$text = str_replace('caches', 'stashes', $text);
		$text = str_replace('cache', 'stash', $text);
		$text = str_replace('Caches', 'Stashes', $text);
		$text = str_replace('Cache', 'Stash', $text);
		$text = str_replace('Grouping', 'Faction', $text);
		$text = str_replace('grouping', 'faction', $text);
		$text = str_replace('Tissue damage: ', 'Tissue damage rating: ', $text);
		$text = str_replace(']average', ']medium', $text);
		$text = str_replace(']strong', ']high', $text);
		$text = str_replace(']is below average', ']low - medium', $text);
		$text = str_replace(']below average', ']low - medium', $text);
		$text = str_replace(']above average', ']medium - high', $text);
		$text = str_replace(']is above average', ']medium - high', $text);
		$text = str_replace(']is very strong', ']very high', $text);
		$text = str_replace(']very strong', ']very high', $text);
		$text = str_replace('FEATURE:', 'SPECIAL:', $text);
		$text = str_replace('Muffler', 'Suppressor', $text);
		$text = str_replace('muffler', 'suppressor', $text);
		$text = str_replace('HANGING EQUIPMENT:', 'ATTACHMENTS:', $text);
		$text = str_replace('HANGED EQUIPMENT:', 'ATTACHMENTS:', $text);
		$text = str_replace('HINGED EQUIPMENT:', 'ATTACHMENTS:', $text);
		$text = str_replace('WEIGHT EQUIPMENT:', 'ATTACHMENTS:', $text);
		$text = str_replace('EQUIPMENT:', 'ATTACHMENTS:', $text);
		$text = str_replace('B B ', '  ', $text);
		$text = str_replace('(+ ', '(+', $text);
		$text = str_replace('( +', '(+', $text);
		$text = str_replace('Overalls', 'Bodysuit', $text);
		$text = str_replace('overalls', 'bodysuit', $text);
		$text = str_replace('Shop for', 'Magazine for', $text);
		$text = str_replace('healthy diet', 'healthy food', $text);
		$text = str_replace('$ ', '$', $text);
		$text = str_replace(']. %c', ']• %c', $text);
		$text = str_replace(' c [', ' %c[', $text);
		$text = str_replace(' C [', ' %c[', $text);
		$text = str_replace('n% [', ' n %c[', $text);
		$text = str_replace('O-Consciousness', 'C-Consciousness', $text);
		$text = str_replace('%s , ', '%s, ', $text);
		$text = str_replace('A cut of ', 'Sawn-off ', $text);
		$text = str_replace('cutting large game', 'chopping thick-skinned mutants', $text);
		$text = str_replace('cutting any game', 'chopping any mutant skin', $text);
		$text = str_replace('suitable for game', 'suitable for chopping mutant skin', $text);
		$text = str_replace('Pure Sky', 'Clear Sky', $text);
		$text = str_replace('CCP', 'PDA', $text);
		$text = str_replace('%s .', '%s.', $text);
		$text = str_replace('].  ', '] ', $text);
		$text = str_replace('~ ', '~', $text);
		$text = str_replace('may be sold', 'can be sold', $text);
		$text = str_replace('may sell', 'can be sold', $text);
		$text = str_replace('possible to sell', 'can be sold', $text);
		$text = str_replace('Overpass', 'Pripyat Underground', $text);
		$text = str_replace('overpass', 'Pripyat Underground', $text);
		$text = str_replace('Healthy!', 'Hey man!', $text);
		$text = str_replace('Debt', 'Duty', $text);
		$text = str_replace('abnormal', 'anomalous', $text);
		$text = str_replace('Abnormal', 'Anomalous', $text);
		$text = str_replace('%s , ', '%s, ', $text);
		$text = str_replace('svobodovets', 'Freedomer', $text);
		$text = str_replace('Arrow', 'Strelok', $text);
		$text = str_replace('  %s', ' %s', $text);
		$text = str_replace('Skadovska', 'Skadovsk', $text);
		$text = str_replace('techie', 'Xenotech', $text);
		$text = str_replace('Techies', 'Xenotech', $text);
		$text = str_replace('Hypericum', 'Trapper', $text);
		$text = str_replace('Pirivet, pal. Chygo izivolish', 'Hey, buddy. What are you doing', $text);
		$text = str_replace('Further', 'Continue', $text);
		$text = str_replace('O-Consciousness', 'C-Consciousness', $text);
		$text = str_replace('singles', 'loners', $text);
		$text = str_replace('Blatari', 'Thugs', $text);
		$text = str_replace('dweller', 'Duty', $text);
		$text = str_replace('dolgar', 'a guy from Duty', $text);
		$text = str_replace('debtors', 'Duty', $text);
		$text = str_replace('dolgari', 'Duty forces', $text);
		$text = str_replace('Anxiety!', 'Requesting backup!', $text);
		$text = str_replace('Chisonibe', 'a Clear Sky stalker', $text);
		$text = str_replace('Chisoneberab', 'Clear Sky', $text);
		$text = str_replace('Chistonebovets', 'Clear Sky', $text);
		$text = str_replace('>clean<', '>Clear Sky<', $text);
		$text = str_replace('Chisonebybovtsy', 'Clear Sky stalkers', $text);
		$text = str_replace('svobodovets', 'Freedom', $text);
		$text = str_replace('svobodovtsa', 'a guy from Freedom', $text);
		$text = str_replace('Svobodovtsy', 'Freedom', $text);
		$text = str_replace('Dark Hollow', 'Darkscape', $text);
		$text = str_replace('Amber', 'Yantar', $text);
		$text = str_replace('warrior', 'army guy', $text);
		$text = str_replace('Sych', 'Owl', $text);
		$text = str_replace('Transparent', 'Limpid', $text);
		$text = str_replace('Unsettled', 'Uncalibrated', $text);
		$text = str_replace('Delay zryva', 'Explosion delay', $text);
		$text = str_replace('Delay explosion', 'Explosion delay', $text);
		$text = str_replace('AKMÐ¡', 'AKMS', $text);
		$text = str_replace('. n ', '. \n ', $text);
		$text = str_replace(' ( ', ' (', $text);
		$text = str_replace('cutting large game', 'chopping thick-skinned mutants', $text);
		$text = str_replace('cutting any game', 'chopping any mutant skin', $text);
		$text = str_replace('suitable for game', 'suitable for chopping mutant skin', $text);
		$text = str_replace('Get the next task.', 'Receive your next task.', $text);
		$text = str_replace('Get the next task', 'Get Next Task', $text);
		$text = str_replace('Sweep', 'Cleaning up', $text);
		$text = str_replace('Brainburner', 'Brain Scorcher', $text);
		$text = str_replace(' %s .', '%s.', $text);
		$text = str_replace('Bring the dolt to', 'Pay Tribute To', $text);
		$text = str_replace('Mokruha', 'Hit Man', $text);
		$text = str_replace('hoga', 'Hog', $text);
		$text = str_replace('Hogu', 'Hog', $text);
		$text = str_replace('the Fastest', 'Nimble', $text);
		$text = str_replace('Gift Pug', 'Find weapon', $text);
		$text = str_replace('Garin', 'Tukarev', $text);
		$text = str_replace('Tutsan', 'Trapper', $text);
		$text = str_replace('Nitrogen', 'Nitro', $text);
		$text = str_replace('Shustromu', 'Nimble', $text);
		$text = str_replace('Pure Sky', 'Clear Sky', $text);
		$text = str_replace('Sumptuously', 'Fantastic', $text);
		$text = str_replace('Polesie', 'Polissya', $text);
		$text = str_replace('Mystery Zone', 'Mysteries of the Zone', $text);
		$text = str_replace('Nov:', 'Noah:', $text);
		$text = str_replace('Skat-', 'Stingray-', $text);		
		$text = str_replace('Gluhar', 'Grouse', $text);
		$text = str_replace('Deal:', 'Transaction:', $text);
		$text = str_replace('Check in:', 'The hit:', $text);
		$text = str_replace('Hitting:', 'The hit:', $text);
		$text = str_replace('Information is absent', 'No information available', $text);
		$text = str_replace('Single people', 'Loners', $text);
		$text = str_replace('Overshoot', 'Blowout', $text);
		$text = str_replace('overshoot', 'blowout', $text);
		$text = str_replace(' \ n ', ' \n ', $text);
		$text = str_replace('  %', ' %', $text);
		$text = str_replace('%[', '%c[', $text);
		//$text = str_replace('grouse', 'Grouse', $text);
		//$text = str_replace(' bleed', ' Sawn-off', $text);
		//$text = str_replace('Leader', 'Stalker Guide', $text);
		//$text = str_replace(' , ', ', ', $text);
		//$text = str_replace('Single', 'Loner', $text);
		//$text = str_replace('single', 'loner', $text);
		//$text = str_replace('Shooter', 'Strelok', $text);
		$text = str_replace(' $$', '$$', $text);
		$text = str_replace('0.1', '0,1', $text);
		$text = str_replace('0.2', '0,2', $text);
		$text = str_replace('0.3', '0,3', $text);
		$text = str_replace('0.4', '0,4', $text);
		$text = str_replace('0.5', '0,5', $text);
		$text = str_replace('0.6', '0,6', $text);
		$text = str_replace('0.7', '0,7', $text);
		$text = str_replace('0.8', '0,8', $text);
		$text = str_replace('0.9', '0,9', $text);		
		$text = str_replace('0 , 1', '0,1', $text);
		$text = str_replace('0 , 2', '0,2', $text);
		$text = str_replace('0 , 3', '0,3', $text);
		$text = str_replace('0 , 4', '0,4', $text);
		$text = str_replace('0 , 5', '0,5', $text);
		$text = str_replace('0 , 6', '0,6', $text);
		$text = str_replace('0 , 7', '0,7', $text);
		$text = str_replace('0 , 8', '0,8', $text);
		$text = str_replace('0 , 9', '0,9', $text);
	}
	return $text;
}

function zip($source, $destination)
{
    $phar = new PharData($destination);
    $phar->buildFromDirectory($source, '~[.][0-9a-z]+$~i');
    return true;
}

function unzip($source, $destination)
{
    $zip = new ZipArchive;
	if ($zip->open($source) === true) {
	    $zip->extractTo($destination);
	    $zip->close();
	}
}

function deleteDir($dirPath)
{
    if (! is_dir($dirPath)) {
        throw new InvalidArgumentException("$dirPath must be a directory");
    }
    if (substr($dirPath, strlen($dirPath) - 1, 1) != '/') {
        $dirPath .= '/';
    }
    $files = glob($dirPath . '*', GLOB_MARK);
    foreach ($files as $file) {
        if (is_dir($file)) {
            deleteDir($file);
        } else {
            unlink($file);
        }
    }
    rmdir($dirPath);
}

function msg($text)
{
	echo " ".$text;
	echo "\n";
}

class GoogleTranslate
{
    public static function translate($source, $target, $text)
    {
        // Request translation
        $response = self::requestTranslation($source, $target, $text);

        // Get translation text
        // $response = self::getStringBetween("onmouseout=\"this.style.backgroundColor='#fff'\">", "</span></div>", strval($response));

        // Clean translation
        $translation = self::getSentencesFromJSON($response);
		
		if ($translation) {
			return $translation;
		} else {
			return $text;
		}
    }

    protected static function requestTranslation($source, $target, $text)
    {
        // Google translate URL
        $url = "https://translate.google.com/translate_a/single?client=at&dt=t&dt=ld&dt=qca&dt=rm&dt=bd&dj=1&hl=es-ES&ie=UTF-8&oe=UTF-8&inputm=2&otf=2&iid=1dd3b944-fa62-4b55-b330-74909a99969e";

        $fields = array(
            'sl' => urlencode($source),
            'tl' => urlencode($target),
            'q' => urlencode($text)
        );

        if(strlen($fields['q'])>=5000)
            throw new \Exception("Maximum number of characters exceeded: 5000");
        
        // URL-ify the data for the POST
        $fields_string = "";
        foreach ($fields as $key => $value) {
            $fields_string .= $key . '=' . $value . '&';
        }

        rtrim($fields_string, '&');

        // Open connection
        $ch = curl_init();

        // Set the url, number of POST vars, POST data
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, count($fields));
        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields_string);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_ENCODING, 'UTF-8');
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_USERAGENT, 'AndroidTranslate/5.3.0.RC02.130475354-53000263 5.1 phone TRANSLATE_OPM5_TEST_1');
        if (defined("proxy") and defined("port")) curl_setopt($ch, CURLOPT_PROXY, "http://".proxy.":".port);

        // Execute post
        $result = curl_exec($ch);

        // Close connection
        curl_close($ch);

        return $result;
    }

    protected static function getSentencesFromJSON($json)
    {
        $sentencesArray = json_decode($json, true);
        $sentences = "";

		if (is_array($sentencesArray)) {
			foreach ($sentencesArray["sentences"] as $s) {
				$sentences .= isset($s["trans"]) ? $s["trans"] : '';
			}

			return $sentences;
		}
		return false;
    }
}
